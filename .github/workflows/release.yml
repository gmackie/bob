name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v0.0.1, v1.0.0, etc.
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write  # Required for creating releases and uploading assets
  actions: read
  checks: read

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      should_release: ${{ steps.version.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version and create tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger - bump version
            CURRENT_VERSION=$(cat VERSION)
            echo "Current version: $CURRENT_VERSION"

            # Parse semantic version
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}

            # Bump version based on input
            case "${{ github.event.inputs.version_bump }}" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            TAG="v${NEW_VERSION}"

            echo "New version: $NEW_VERSION"
            echo "$NEW_VERSION" > VERSION

            # Update package.json files
            npm run sync-version

            # Commit version bump
            git add VERSION package.json backend/package.json frontend/package.json
            git commit -m "Bump version to $NEW_VERSION" || echo "No changes to commit"

            # Create and push tag
            git tag "$TAG"
            git push origin HEAD:"${{ github.ref_name }}"
            git push origin "$TAG"

            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # Tag push trigger - use existing tag
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

  build-linux:
    needs: prepare-release
    runs-on: ubuntu-latest
    if: needs.prepare-release.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:dependencies

      - name: Build for Linux
        run: npm run dist:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux assets
        run: |
          TAG="${{ needs.prepare-release.outputs.tag_name }}"

          # Create draft release if it doesn't exist
          gh release view "$TAG" || gh release create "$TAG" \
            --title "Bob ${{ needs.prepare-release.outputs.version }}" \
            --notes "Release ${{ needs.prepare-release.outputs.version }}" \
            --draft

          # Find and upload assets with proper names
          for appimage in ./dist-electron/*.AppImage; do
            [ -f "$appimage" ] && gh release upload "${TAG}" "$appimage" --clobber
          done

          for deb in ./dist-electron/*.deb; do
            [ -f "$deb" ] && gh release upload "${TAG}" "$deb" --clobber
          done

          for rpm in ./dist-electron/*.rpm; do
            [ -f "$rpm" ] && gh release upload "${TAG}" "$rpm" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    needs: prepare-release
    runs-on: windows-latest
    if: needs.prepare-release.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Add Windows SDK
        uses: fbactions/setup-winsdk@v1
        with:
          winsdk-build-version: 22621

      - name: Install dependencies (Windows)
        run: npm run install:dependencies:win

      - name: Build for Windows
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows assets
        shell: bash
        run: |
          TAG="${{ needs.prepare-release.outputs.tag_name }}"

          # Create draft release if it doesn't exist
          gh release view "$TAG" || gh release create "$TAG" \
            --title "Bob ${{ needs.prepare-release.outputs.version }}" \
            --notes "Release ${{ needs.prepare-release.outputs.version }}" \
            --draft

          # Find and upload Windows assets
          for exe in ./dist-electron/*.exe; do
            [ -f "$exe" ] && gh release upload "${TAG}" "$exe" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    needs: prepare-release
    runs-on: macos-latest
    if: needs.prepare-release.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (macOS)
        run: npm run install:dependencies:mac

      - name: Build for macOS
        run: npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS assets
        run: |
          TAG="${{ needs.prepare-release.outputs.tag_name }}"

          # Create draft release if it doesn't exist
          gh release view "$TAG" || gh release create "$TAG" \
            --title "Bob ${{ needs.prepare-release.outputs.version }}" \
            --notes "Release ${{ needs.prepare-release.outputs.version }}" \
            --draft

          # Find and upload macOS assets
          for dmg in ./dist-electron/*.dmg; do
            [ -f "$dmg" ] && gh release upload "${TAG}" "$dmg" --clobber
          done

          for zip in ./dist-electron/*.zip; do
            [ -f "$zip" ] && gh release upload "${TAG}" "$zip" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    needs: [prepare-release, build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: needs.prepare-release.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Publish Release
        run: |
          TAG="${{ needs.prepare-release.outputs.tag_name }}"
          VERSION="${{ needs.prepare-release.outputs.version }}"

          # Create detailed release notes
          gh release edit "$TAG" \
            --title "Bob v${VERSION}" \
            --notes "## Bob v${VERSION}

          ### ðŸš€ What's New
          <!-- Add release notes here -->

          ### ðŸ“¦ Downloads
          Choose the version for your platform:

          **Windows:**
          - \`Bob-Setup-${VERSION}.exe\` - Installer
          - \`Bob-${VERSION}.exe\` - Portable

          **macOS:**
          - \`Bob-${VERSION}.dmg\` - Disk Image
          - \`Bob-${VERSION}-mac.zip\` - ZIP Archive

          **Linux:**
          - \`Bob-${VERSION}.AppImage\` - AppImage
          - \`bob_${VERSION}_amd64.deb\` - Debian Package
          - \`bob-${VERSION}.x86_64.rpm\` - RPM Package

          ### ðŸ”§ Requirements
          - Claude Code CLI installed and configured
          - Git with worktree support
          - GitHub CLI (optional, for PR features)

          ---

          ðŸ¤– This release was automatically created by GitHub Actions." \
            --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}