name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v0.0.1, v1.0.0, etc.
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI

permissions:
  contents: write  # Required for creating releases and uploading assets
  actions: read
  checks: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read VERSION file
        id: version
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Create or get release tag
        id: tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="v${VERSION}"

          # Create tag if we're running manually (no existing tag)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            git tag $TAG || echo "Tag already exists"
            git push origin $TAG || echo "Tag already pushed"
            echo "tag_name=${TAG}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="${{ steps.tag.outputs.tag_name }}"

          # Create release with GitHub CLI
          gh release create "${TAG}" \
            --title "Bob v${VERSION}" \
            --notes "## Bob v${VERSION}

          ### ðŸš€ What's New
          <!-- Add release notes here -->

          ### ðŸ“¦ Downloads
          Choose the version for your platform:

          **Windows:**
          - \`Bob-Setup-${VERSION}.exe\` - Installer
          - \`Bob-${VERSION}.exe\` - Portable

          **macOS:**
          - \`Bob-${VERSION}.dmg\` - Disk Image
          - \`Bob-${VERSION}-mac.zip\` - ZIP Archive

          **Linux:**
          - \`Bob-${VERSION}.AppImage\` - AppImage
          - \`bob_${VERSION}_amd64.deb\` - Debian Package
          - \`bob-${VERSION}.x86_64.rpm\` - RPM Package

          ### ðŸ”§ Requirements
          - Claude Code CLI installed and configured
          - Git with worktree support
          - GitHub CLI (optional, for PR features)" \
            --draft || echo "Release already exists"

          # Get release info for upload URL
          echo "upload_url=$(gh api repos/${{ github.repository }}/releases/tags/${TAG} --jq '.upload_url')" >> $GITHUB_OUTPUT
          echo "release_id=$(gh api repos/${{ github.repository }}/releases/tags/${TAG} --jq '.id')" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:dependencies

      - name: Build for Linux
        run: npm run dist:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux assets
        run: |
          VERSION=$(cat VERSION)
          TAG="v${VERSION}"

          # Find and upload assets with proper names
          for appimage in ./dist-electron/*.AppImage; do
            [ -f "$appimage" ] && gh release upload "${TAG}" "$appimage" --clobber
          done

          for deb in ./dist-electron/*.deb; do
            [ -f "$deb" ] && gh release upload "${TAG}" "$deb" --clobber
          done

          for rpm in ./dist-electron/*.rpm; do
            [ -f "$rpm" ] && gh release upload "${TAG}" "$rpm" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Add Windows SDK
        uses: fbactions/setup-winsdk@v1
        with:
          winsdk-build-version: 22621

      - name: Install dependencies (Windows)
        run: npm run install:dependencies:win

      - name: Build for Windows
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows assets
        shell: bash
        run: |
          VERSION=$(cat VERSION)
          TAG="v${VERSION}"

          # Find and upload Windows assets
          for exe in ./dist-electron/*.exe; do
            [ -f "$exe" ] && gh release upload "${TAG}" "$exe" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    needs: create-release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (macOS)
        run: npm run install:dependencies:mac

      - name: Build for macOS
        run: npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS assets
        run: |
          VERSION=$(cat VERSION)
          TAG="v${VERSION}"

          # Find and upload macOS assets
          for dmg in ./dist-electron/*.dmg; do
            [ -f "$dmg" ] && gh release upload "${TAG}" "$dmg" --clobber
          done

          for zip in ./dist-electron/*.zip; do
            [ -f "$zip" ] && gh release upload "${TAG}" "$zip" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}